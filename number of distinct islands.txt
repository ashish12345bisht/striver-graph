//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int delRow[4]={-1,0,1,0};
    int delCol[4]={0,-1,0,1};
    void dfs(int row,int col, vector<vector<int>>& grid,vector<vector<int>>& v,vector<pair<int,int>> &temp,int bRow, int bCol){
        v[row][col]=1;
        temp.push_back({row-bRow,col-bCol});
        for(int i=0;i<4;i++){
            int nR = row+delRow[i];
            int nC = col+delCol[i];
            if(nR>=0 and nC>=0 and nR<grid.size() and nC<grid[0].size() and !v[nR][nC] and grid[nR][nC]==1){
                // v[nR][nC]=1;
                // cout<<nR<<" "<<nC<<endl;
                dfs(nR,nC,grid,v,temp,bRow,bCol);
            }
        }      
        
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> v(m,vector<int> (n,0));
        set<vector<pair<int,int>>> s;
        for(int i=0;i<m;i++){
             for(int j=0;j<n;j++){
                 if(!v[i][j] and grid[i][j]==1){
                     vector<pair<int,int>> temp;
                    //  cout<<i<<" "<<j<<endl;
                     dfs(i,j,grid,v,temp,i,j);
                     s.insert(temp);
                 }
             }
        }
        // for(auto i:s){
        //     for(int j=0;j<i.size();j++){
        //         // cout<<i[j].first<<" "<<i[j].second<<endl;
        //     }
        // }
        return s.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends