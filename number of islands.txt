//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    void dfs(int row, int col, vector<vector<char>>& grid){
        if(row<0 or col<0 or row>=grid.size() or col>=grid[0].size() or grid[row][col]=='0'){
            return;
        }
        grid[row][col]='0';
        dfs(row-1,col,grid);
        dfs(row-1,col+1,grid);
        dfs(row-1,col-1,grid);
        dfs(row,col+1,grid);
        dfs(row,col-1,grid);
        dfs(row+1,col,grid);
        dfs(row+1,col-1,grid);
        dfs(row+1,col+1,grid);
    }
    void bfs(int row, int col, vector<vector<char>>& grid){
        grid[row][col]='0';
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int,int>> q;
        q.push({row,col});
        while(!q.empty()){
            int crow=q.front().first;
            int ccol=q.front().second;
            q.pop();
            for(int i=-1;i<=1;i++)
            {
                for(int j=-1;j<=1;j++){
                    int nrow=crow+i;
                    int ncol=ccol+j;
                    if(nrow>=0 and nrow<m and ncol>=0 and ncol<n and grid[nrow][ncol]=='1'){
                        grid[nrow][ncol]='0';
                        q.push({nrow,ncol});
                    }
                }
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int m=grid.size();
        int n=grid[0].size();
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    count++;
                    bfs(i,j,grid);//or dfs(i,j,grid);
                }
            }
        }
        return count;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends