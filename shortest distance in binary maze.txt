//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        // code here
        queue<vector<int>> q;
        q.push({0,source.first,source.second});
        vector<vector<int>> dist(grid.size(),vector<int>(grid[0].size(),1e9));
        int delRow[4]={1,0,-1,0};
        int delCol[4]={0,1,0,-1};
        dist[source.first][source.second]=0;
        while(!q.empty()){
            int dis = q.front()[0];
            int row = q.front()[1];
            int col = q.front()[2];
            q.pop();
            for(int i=0;i<4;i++){
                int r=row+delRow[i];
                int c=col+delCol[i];
                if(r>=0 and c>=0 and r<dist.size() and c<dist[0].size() and dis+1<dist[r][c] and grid[r][c]==1){
                    dist[r][c]=dis+1;
                    q.push({dis+1,r,c});
                }
            }
        }
        if(dist[destination.first][destination.second]==1e9)return -1;
        return dist[destination.first][destination.second];
    }
};


//{ Driver Code Starts.
int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }

        pair<int, int> source, destination;
        cin >> source.first >> source.second;
        cin >> destination.first >> destination.second;
        Solution obj;
        cout << obj.shortestPath(grid, source, destination) << endl;
    }
}

// } Driver Code Ends